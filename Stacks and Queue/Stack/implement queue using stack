
import java.util.*;

class Main
{
static class Queue      //Queue Class
{
	static Stack<Integer> s1 = new Stack<Integer>();       //two stacks
	static Stack<Integer> s2 = new Stack<Integer>();

	static void add(int x) {                  //adding elements are same in both stack and queue
        s1.push(x);
    }
    
    static int poll() {                        //stacks follws last in first out whereas queue follows first in first out 
        if(s1.empty()&&s2.empty())return -1;
        peek();
        return s2.pop();
    }
    
    static int peek() {          //s1 have some numbers to pop out the first element, we first popo out all the elements in another stack 
        
        if(s2.empty()){         // push the elements in s2 stack for  pop and peek the element
            while(!s1.isEmpty()){   //add:s1     1      2      3
                s2.push(s1.pop());  //pop:s2     3       2      1(pop)
            }
        }                          //peek:s2     3      2(peek)||(pop)
        int x = s2.peek();         //add: s1     4     6
                                //      : s2     3
        return x;                 //peek:s2 is not empty 3(peek)||(pop)
    }                            // pop:s2 is empty 
                                //      s1    4   6
    static boolean empty() {    //      s2    6   4(pop||peek)
        return s1.isEmpty() && s2.isEmpty();
    }
}


public static void main(String[] args)
{
	Queue q = new Queue();
	q.add(1);
	q.add(2);
	q.add(3);

	System.out.println(q.poll());
	System.out.println(q.peek());
	System.out.println(q.poll());
	q.add(4);
	q.add(6);
	System.out.println(q.poll());
	System.out.println(q.peek());
	System.out.println(q.poll());
	System.out.println(q.peek());
	System.out.println(q.poll());
	System.out.println(q.poll());
}
}




