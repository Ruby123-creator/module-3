import java.util.*;
class Node{
    int x;
    Node next;
    Node(int x){
        this.x = x;
    }
}
class LinkedList{
    Node head;
    //to find the length of the linkedlist
    public int size(){
        int count =0;
        Node curr = head;
        while(curr!=null){
            count++;
            curr = curr.next;
        }
        return count;
    }
    // to check whether the linkedlist is palindrome or not
    public boolean palindrome(){
        
        //using stack t.c-O(n)  and s.c-O(n)
        // Stack<Integer> st = new Stack<>();
        // Node curr = head;
        // while(curr!=null){
        //     st.push(curr.x);
        //     curr = curr.next;
        // }
        //  curr = head;
        // while(!st.empty() && curr!=null){
        //     if(curr.x!=st.pop()){
        //         return false;
        //     }
        //     curr = curr.next;
        // }
        // return true;
        
        
        //find middle of the LL
          Node slow = head;                        // 1   2   3 |  3   2   1
          Node fast = head;                        // 3   2   1 -- reverse --->1   2   3   
          while(fast!=null&&fast.next!=null){
              slow = slow.next;
              fast = fast.next.next;           
          }
          
          Node ans = reverseLL(slow);
          fast = head;
          while(ans!=null){
              if(ans.x!=fast.x){
                  return false;
              }
              ans = ans.next;
              fast = fast.next;
          }
          return true;
    }
    
    //to remove duplicates from the list
    public void removeduplicates(){               // LL   11  11   11   45   50    50    60
        Node curr = head;                         //  curr       temp 
        while(curr!=null){                        //   11         11
            Node temp = curr;                   //    while loop 3 baar chlega and in 4th time it exit
            while(temp!=null && temp.x==curr.x){ //   11-->45
                temp = temp.next;               //      curr = 45      temp = 45
            }                                   //   11-->45-->50
            curr.next = temp;                   //   curr = 50   temp =50
            curr = curr.next;                   // while loop runs two times and in 3rd time it exit
        }                                       //  11-->45-->50-->60
    }
    // to reverse the LinkedList
    public Node reverseLL(Node head){                    //  LL   1-->2-->3-->4-->5-->null
        Node curr =head;                        //       prev    curr           next
        Node next = null;                       //        null    1-->null       null
        Node prev = null;                       //         1      2-->1           2
        while(curr!=null){                      //         2      3-->2            3
            next = curr.next;                   //         3      4-->3            4 
            curr.next = prev;                   //         4      5-->4            5
            prev = curr;                        //         5        null          null              
            curr =next;
        }                                       //   5-->4-->3-->2-->1
        return prev;
    }
    // to add the node at tail of the list
    public void addAtTail(int data){
        Node newnode = new Node(data);
        if(head==null){
            head = newnode;
            return;
        }
        Node curr = head;
        while(curr.next!=null){
            curr = curr.next;
        }
        curr.next = newnode;
    }
    
    //to print the node of the list
    public void printlist(){
        Node curr = head;
        while(curr!=null){
            System.out.print(curr.x +" ");
            curr = curr.next;
        }
    }
}
public class Main
{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
	    LinkedList l = new LinkedList();
	    int n = sc.nextInt();
	    for(int i=0;i<n;i++){
	        l.addAtTail(sc.nextInt());
	    }
	   
	   // Node ans = l.reverseLL();
	    
	    
	    
	   //l.removeduplicates();
	   
	   
	   System.out.println(l.palindrome());
	    //l.printlist();
	   //System.out.println(l.size()); 
	   
	}
}
