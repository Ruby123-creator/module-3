// Java program to subtract smaller valued
// list from larger valued list and return
// result as a list.
import java.util.*;
import java.lang.*;
import java.io.*;
class Node{
  int data;
  Node next;
  Node(int data){
    this.data = data;
    this.next = null;
  }
}
class LinkedList{
  static Node head;
  
  public void add(int data){
    Node newnode = new Node(data);
    if(head==null){
        head = newnode;
        return;
    }
    Node curr = head;
    while(curr.next!=null){
        curr = curr.next;
    }
    curr.next = newnode;

    
  }
   void display(){
	    Node curr = head;
	    while(curr!=null){
	        System.out.print(curr.data +" ");
	        curr = curr.next;
	    }
  }
     
}

class Main {
	
	boolean borrow;
	int getLength(Node node)
	{
		int size = 0;
		while (node != null) {
			node = node.next;
			size++;
		}
		return size;
	}
	Node paddZeros(Node sNode, int diff)
	{
		if (sNode == null)
			return null;

		Node zHead = new Node(0);
		diff--;
		Node temp = zHead;
		while ((diff--) != 0) {
			temp.next = new Node(0);
			temp = temp.next;
		}
		temp.next = sNode;
		return zHead;
	}

	
	Node subtractLinkedListHelper(Node l1, Node l2)
	{
		if (l1 == null && l2 == null && borrow == false)
			return null;

		Node previous
			= subtractLinkedListHelper(
				(l1 != null) ? l1.next
							: null,
				(l2 != null) ? l2.next : null);

		int d1 = l1.data;
		int d2 = l2.data;
		int sub = 0;

		/* if you have given the value to
		next digit then reduce the d1 by 1 */
		if (borrow) {
			d1--;
			borrow = false;
		}

		/* If d1 < d2, then borrow the number from
		previous digit. Add 10 to d1 and set
		borrow = true; */
		if (d1 < d2) {
			borrow = true;
			d1 = d1 + 10;
		}

		/* subtract the digits */
		sub = d1 - d2;

		/* Create a Node with sub value */
		Node current = new Node(sub);

		/* Set the Next pointer as Previous */
		current.next = previous;

		return current;
	}

	/* This API subtracts two linked lists and
	returns the linked list which shall have the
	subtracted result. */
	Node subtractLinkedList(Node l1, Node l2)
	{
		// Base Case.
		if (l1 == null && l2 == null)
			return null;

		// In either of the case, get the lengths
		// of both Linked list.
		int len1 = getLength(l1);
		int len2 = getLength(l2);

		Node lNode = null, sNode = null;

		Node temp1 = l1;
		Node temp2 = l2;

		// If lengths differ, calculate the smaller
		// Node and padd zeros for smaller Node and
		// ensure both larger Node and smaller Node
		// has equal length.
		if (len1 != len2) {
			lNode = len1 > len2 ? l1 : l2;
			sNode = len1 > len2 ? l2 : l1;
			sNode = paddZeros(sNode, Math.abs(len1 - len2));
		}

		else {
			// If both list lengths are equal, then
			// calculate the larger and smaller list.
			// If 5-6-7 & 5-6-8 are linked list, then
			// walk through linked list at last Node
			// as 7 < 8, larger Node is 5-6-8 and
			// smaller Node is 5-6-7.
			while (l1 != null && l2 != null) {
				if (l1.data != l2.data) {
					lNode = l1.data > l2.data ? temp1 : temp2;
					sNode = l1.data > l2.data ? temp2 : temp1;
					break;
				}
				l1 = l1.next;
				l2 = l2.next;
			}
		}

		// After calculating larger and smaller Node,
		// call subtractLinkedListHelper which returns
		// the subtracted linked list.
		borrow = false;
		return subtractLinkedListHelper(lNode, sNode);
	} 
	
	


	

	// Driver program to test above
	public static void main(String[] args)
	{
		

		Scanner sc = new Scanner(System.in);
      int m = sc.nextInt();
      int n = sc.nextInt();
      LinkedList list1 = new LinkedList();
      LinkedList list2 = new LinkedList();
      for(int i=0;i<m;i++){
        list1.add(sc.nextInt());
      }
      
     
      for(int i =0;i<n;i++){
        list2.add(sc.nextInt());
      }
      
       list1.display();
       System.out.println();
        list2.display();
    //   LinkedList ans = new LinkedList();
    //   Node temp = ans.subtractLinkedList(list1.head , list2.head );
       
      
	}
}

// This article is contributed by Chhavi
